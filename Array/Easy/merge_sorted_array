88. Merge Sorted Array

You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

 

Example 1:

Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.
Example 2:

Input: nums1 = [1], m = 1, nums2 = [], n = 0
Output: [1]
Explanation: The arrays we are merging are [1] and [].
The result of the merge is [1].

Approach 1:  Naive one 
		create an array of size m+n

Approach 2: Better one


class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        

        int idx=m+n-1;
        int p1=m-1;
        int p2=n-1;

        while(p2>=0)
        {
                if(p1>=0&&nums1[p1]>nums2[p2])
                     nums1[idx--]=nums1[p1--];
                else
                  nums1[idx--]=nums2[p2--];
        }



    }
}



In the given Java implementation, we are checking p2 >= 0 in the while loop condition because we are using p2 as an index to access elements of nums2 in the loop.

The loop should continue as long as p2 is greater than or equal to 0, which means we still have elements in nums2 that we have not yet added to nums1.

Once p2 becomes less than 0, it means we have added all the elements of nums2 to nums1. At this point, we can stop the loop and exit the function.