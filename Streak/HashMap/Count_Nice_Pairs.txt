1814. Count Nice Pairs in an Array
Medium
1.6K
67
Companies
You are given an array nums that consists of non-negative integers. Let us define rev(x) as the reverse of the non-negative integer x. For example, rev(123) = 321, and rev(120) = 21. A pair of indices (i, j) is nice if it satisfies all of the following conditions:

0 <= i < j < nums.length
nums[i] + rev(nums[j]) == nums[j] + rev(nums[i])
Return the number of nice pairs of indices. Since that number can be too large, return it modulo 109 + 7.

 

Example 1:

Input: nums = [42,11,1,97]
Output: 2
Explanation: The two pairs are:
 - (0,3) : 42 + rev(97) = 42 + 79 = 121, 97 + rev(42) = 97 + 24 = 121.
 - (1,2) : 11 + rev(1) = 11 + 1 = 12, 1 + rev(11) = 1 + 11 = 12.
Example 2:

Input: nums = [13,10,35,24,76]
Output: 4
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 109

=========

Sol: 
 





import java.util.HashMap;
import java.util.Map;

public class Solution {
    public int countNicePairs(int[] nums) {
       HashMap<Integer,Integer> map=new HashMap<>();
       int count=0;
       int MOD=1000000007;

       for(int i=0;i<nums.length;i++)
       {
           int revnum=reverseNumber(nums[i]);
           int diff=nums[i]-revnum;

           map.put(diff,map.getOrDefault(diff,0)+1);
       } 

       for(int val:map.values())
       {
           if(val>1){
            long pairs=( (long)val*(long)((val-1))/2)%MOD; 
            count=(count+(int)pairs)%MOD; 
           }
           
       }
       return count;

    }

    private int reverseNumber(int n) {
        int reversed = 0;
        while (n != 0) {
            int digit = n % 10;
            reversed = reversed * 10 + digit;
            n = n / 10;
        }
        return reversed;
    }
}


